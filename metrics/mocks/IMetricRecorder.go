// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	metrics "github.com/kubeslice/kubeslice-controller/metrics"
	mock "github.com/stretchr/testify/mock"

	prometheus "github.com/prometheus/client_golang/prometheus"
)

// IMetricRecorder is an autogenerated mock type for the IMetricRecorder type
type IMetricRecorder struct {
	mock.Mock
}

// RecordCounterMetric provides a mock function with given fields: metric, labels
func (_m *IMetricRecorder) RecordCounterMetric(metric *prometheus.CounterVec, labels map[string]string) {
	_m.Called(metric, labels)
}

// RecordGaugeMetric provides a mock function with given fields: metric, labels, value
func (_m *IMetricRecorder) RecordGaugeMetric(metric *prometheus.GaugeVec, labels map[string]string, value float64) {
	_m.Called(metric, labels, value)
}

// WithNamespace provides a mock function with given fields: _a0
func (_m *IMetricRecorder) WithNamespace(_a0 string) *metrics.MetricRecorder {
	ret := _m.Called(_a0)

	var r0 *metrics.MetricRecorder
	if rf, ok := ret.Get(0).(func(string) *metrics.MetricRecorder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metrics.MetricRecorder)
		}
	}

	return r0
}

// WithProject provides a mock function with given fields: _a0
func (_m *IMetricRecorder) WithProject(_a0 string) *metrics.MetricRecorder {
	ret := _m.Called(_a0)

	var r0 *metrics.MetricRecorder
	if rf, ok := ret.Get(0).(func(string) *metrics.MetricRecorder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metrics.MetricRecorder)
		}
	}

	return r0
}

// WithSlice provides a mock function with given fields: _a0
func (_m *IMetricRecorder) WithSlice(_a0 string) *metrics.MetricRecorder {
	ret := _m.Called(_a0)

	var r0 *metrics.MetricRecorder
	if rf, ok := ret.Get(0).(func(string) *metrics.MetricRecorder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metrics.MetricRecorder)
		}
	}

	return r0
}

type mockConstructorTestingTNewIMetricRecorder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIMetricRecorder creates a new instance of IMetricRecorder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIMetricRecorder(t mockConstructorTestingTNewIMetricRecorder) *IMetricRecorder {
	mock := &IMetricRecorder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
