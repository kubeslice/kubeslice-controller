// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	controllerv1alpha1 "github.com/kubeslice/kubeslice-controller/apis/controller/v1alpha1"
	mock "github.com/stretchr/testify/mock"

	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"

	v1alpha1 "github.com/kubeslice/kubeslice-controller/apis/worker/v1alpha1"
)

// IWorkerServiceImportService is an autogenerated mock type for the IWorkerServiceImportService type
type IWorkerServiceImportService struct {
	mock.Mock
}

// CreateMinimalWorkerServiceImport provides a mock function with given fields: ctx, clusters, namespace, label, serviceName, serviceNamespace, sliceName, aliases
func (_m *IWorkerServiceImportService) CreateMinimalWorkerServiceImport(ctx context.Context, clusters []string, namespace string, label map[string]string, serviceName string, serviceNamespace string, sliceName string, aliases []string) error {
	ret := _m.Called(ctx, clusters, namespace, label, serviceName, serviceNamespace, sliceName, aliases)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string, map[string]string, string, string, string, []string) error); ok {
		r0 = rf(ctx, clusters, namespace, label, serviceName, serviceNamespace, sliceName, aliases)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWorkerServiceImportByLabel provides a mock function with given fields: ctx, label, namespace
func (_m *IWorkerServiceImportService) DeleteWorkerServiceImportByLabel(ctx context.Context, label map[string]string, namespace string) error {
	ret := _m.Called(ctx, label, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, string) error); ok {
		r0 = rf(ctx, label, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForceReconciliation provides a mock function with given fields: ctx, list
func (_m *IWorkerServiceImportService) ForceReconciliation(ctx context.Context, list []v1alpha1.WorkerServiceImport) error {
	ret := _m.Called(ctx, list)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []v1alpha1.WorkerServiceImport) error); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListWorkerServiceImport provides a mock function with given fields: ctx, ownerLabel, namespace
func (_m *IWorkerServiceImportService) ListWorkerServiceImport(ctx context.Context, ownerLabel map[string]string, namespace string) ([]v1alpha1.WorkerServiceImport, error) {
	ret := _m.Called(ctx, ownerLabel, namespace)

	var r0 []v1alpha1.WorkerServiceImport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, string) ([]v1alpha1.WorkerServiceImport, error)); ok {
		return rf(ctx, ownerLabel, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, string) []v1alpha1.WorkerServiceImport); ok {
		r0 = rf(ctx, ownerLabel, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1alpha1.WorkerServiceImport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, string) error); ok {
		r1 = rf(ctx, ownerLabel, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupServiceExportForService provides a mock function with given fields: ctx, serviceExportList, namespace, serviceName, serviceNamespace, sliceName
func (_m *IWorkerServiceImportService) LookupServiceExportForService(ctx context.Context, serviceExportList *controllerv1alpha1.ServiceExportConfigList, namespace string, serviceName string, serviceNamespace string, sliceName string) error {
	ret := _m.Called(ctx, serviceExportList, namespace, serviceName, serviceNamespace, sliceName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *controllerv1alpha1.ServiceExportConfigList, string, string, string, string) error); ok {
		r0 = rf(ctx, serviceExportList, namespace, serviceName, serviceNamespace, sliceName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReconcileWorkerServiceImport provides a mock function with given fields: ctx, req
func (_m *IWorkerServiceImportService) ReconcileWorkerServiceImport(ctx context.Context, req reconcile.Request) (reconcile.Result, error) {
	ret := _m.Called(ctx, req)

	var r0 reconcile.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request) (reconcile.Result, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request) reconcile.Result); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	if rf, ok := ret.Get(1).(func(context.Context, reconcile.Request) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIWorkerServiceImportService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIWorkerServiceImportService creates a new instance of IWorkerServiceImportService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIWorkerServiceImportService(t mockConstructorTestingTNewIWorkerServiceImportService) *IWorkerServiceImportService {
	mock := &IWorkerServiceImportService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
