// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/kubeslice/kubeslice-controller/apis/worker/v1alpha1"
)

// IWorkerSliceGatewayRecyclerService is an autogenerated mock type for the IWorkerSliceGatewayRecyclerService type
type IWorkerSliceGatewayRecyclerService struct {
	mock.Mock
}

// DeleteWorkerSliceGatewayRecyclersByLabel provides a mock function with given fields: ctx, label, namespace
func (_m *IWorkerSliceGatewayRecyclerService) DeleteWorkerSliceGatewayRecyclersByLabel(ctx context.Context, label map[string]string, namespace string) error {
	ret := _m.Called(ctx, label, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, string) error); ok {
		r0 = rf(ctx, label, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListWorkerSliceGatewayRecyclers provides a mock function with given fields: ctx, ownerLabel, namespace
func (_m *IWorkerSliceGatewayRecyclerService) ListWorkerSliceGatewayRecyclers(ctx context.Context, ownerLabel map[string]string, namespace string) ([]v1alpha1.WorkerSliceGwRecycler, error) {
	ret := _m.Called(ctx, ownerLabel, namespace)

	var r0 []v1alpha1.WorkerSliceGwRecycler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, string) ([]v1alpha1.WorkerSliceGwRecycler, error)); ok {
		return rf(ctx, ownerLabel, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, string) []v1alpha1.WorkerSliceGwRecycler); ok {
		r0 = rf(ctx, ownerLabel, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1alpha1.WorkerSliceGwRecycler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, string) error); ok {
		r1 = rf(ctx, ownerLabel, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIWorkerSliceGatewayRecyclerService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIWorkerSliceGatewayRecyclerService creates a new instance of IWorkerSliceGatewayRecyclerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIWorkerSliceGatewayRecyclerService(t mockConstructorTestingTNewIWorkerSliceGatewayRecyclerService) *IWorkerSliceGatewayRecyclerService {
	mock := &IWorkerSliceGatewayRecyclerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
