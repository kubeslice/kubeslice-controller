// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/rbac/v1"
)

// IAccessControlRuleProvider is an autogenerated mock type for the IAccessControlRuleProvider type
type IAccessControlRuleProvider struct {
	mock.Mock
}

// ReadOnlyRoleRules provides a mock function with given fields:
func (_m *IAccessControlRuleProvider) ReadOnlyRoleRules() []v1.PolicyRule {
	ret := _m.Called()

	var r0 []v1.PolicyRule
	if rf, ok := ret.Get(0).(func() []v1.PolicyRule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.PolicyRule)
		}
	}

	return r0
}

// ReadWriteRoleRules provides a mock function with given fields:
func (_m *IAccessControlRuleProvider) ReadWriteRoleRules() []v1.PolicyRule {
	ret := _m.Called()

	var r0 []v1.PolicyRule
	if rf, ok := ret.Get(0).(func() []v1.PolicyRule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.PolicyRule)
		}
	}

	return r0
}

// WorkerClusterRoleRules provides a mock function with given fields:
func (_m *IAccessControlRuleProvider) WorkerClusterRoleRules() []v1.PolicyRule {
	ret := _m.Called()

	var r0 []v1.PolicyRule
	if rf, ok := ret.Get(0).(func() []v1.PolicyRule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.PolicyRule)
		}
	}

	return r0
}

type mockConstructorTestingTNewIAccessControlRuleProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAccessControlRuleProvider creates a new instance of IAccessControlRuleProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAccessControlRuleProvider(t mockConstructorTestingTNewIAccessControlRuleProvider) *IAccessControlRuleProvider {
	mock := &IAccessControlRuleProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
